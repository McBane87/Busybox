# vi: set sw=4 ts=4:

=head1 NAME

BusyBox - The Swiss Army Knife of Embedded Linux

=head1 SYNTAX

 busybox <applet> [arguments...]  # or

 <applet> [arguments...]	  # if symlinked

=head1 DESCRIPTION

BusyBox combines tiny versions of many common UNIX utilities into a single
small executable. It provides minimalist replacements for most of the utilities
you usually find in GNU coreutils, util-linux, etc. The utilities in BusyBox
generally have fewer options than their full-featured GNU cousins; however, the
options that are included provide the expected functionality and behave very
much like their GNU counterparts.

BusyBox has been written with size-optimization and limited resources in mind.
It is also extremely modular so you can easily include or exclude commands (or
features) at compile time. This makes it easy to customize your embedded
systems. To create a working system, just add /dev, /etc, and a Linux kernel.
BusyBox provides a fairly complete POSIX environment for any small or embedded
system.

BusyBox is extremely configurable.  This allows you to include only the
components you need, thereby reducing binary size. Run 'make config' or 'make
menuconfig' to select the functionality that you wish to enable.  Then run
'make' to compile BusyBox using your configuration.

After the compile has finished, you should use 'make install' to install
BusyBox. This will install the 'bin/busybox' binary, in the target directory
specified by CONFIG_PREFIX. CONFIG_PREFIX can be set when configuring BusyBox,
or you can specify an alternative location at install time (i.e., with a
command line like 'make CONFIG_PREFIX=/tmp/foo install'). If you enabled
any applet installation scheme (either as symlinks or hardlinks), these will
also be installed in the location pointed to by CONFIG_PREFIX.

=head1 USAGE

BusyBox is a multi-call binary.  A multi-call binary is an executable program
that performs the same job as more than one utility program.  That means there
is just a single BusyBox binary, but that single binary acts like a large
number of utilities.  This allows BusyBox to be smaller since all the built-in
utility programs (we call them applets) can share code for many common
operations.

You can also invoke BusyBox by issuing a command as an argument on the
command line.  For example, entering

	/bin/busybox ls

will also cause BusyBox to behave as 'ls'.

Of course, adding '/bin/busybox' into every command would be painful.  So most
people will invoke BusyBox using links to the BusyBox binary.

For example, entering

	ln -s /bin/busybox ls
	./ls

will cause BusyBox to behave as 'ls' (if the 'ls' command has been compiled
into BusyBox).  Generally speaking, you should never need to make all these
links yourself, as the BusyBox build system will do this for you when you run
the 'make install' command.

If you invoke BusyBox with no arguments, it will provide you with a list of the
applets that have been compiled into your BusyBox binary.

=head1 COMMON OPTIONS

Most BusyBox applets support the B<--help> argument to provide a terse runtime
description of their behavior.  If the CONFIG_FEATURE_VERBOSE_USAGE option has
been enabled, more detailed usage information will also be available.

=head1 COMMANDS

Currently available applets include:

	[, [[, ash, awk, base64, basename, bbconfig, blkid, blockdev,
	bunzip2, bzcat, bzip2, cal, cat, catv, chattr, chgrp, chmod, chown,
	chroot, cksum, clear, cmp, cp, cpio, cut, date, dc, dd, depmod,
	devmem, df, diff, dirname, dmesg, dos2unix, du, echo, egrep, env,
	expand, expr, false, fatattr, fdisk, fgrep, find, findfs, fold,
	free, freeramdisk, fsck, fstrim, fuser, getopt, grep, groups,
	gunzip, gzip, head, hexdump, id, insmod, install, kill, killall,
	killall5, less, ln, losetup, ls, lsattr, lsmod, lsof, lspci, lsusb,
	lzcat, lzop, lzopcat, makedevs, md5sum, mkdir, mkdosfs, mke2fs,
	mkfifo, mkfs.ext2, mkfs.reiser, mkfs.vfat, mknod, mkswap, mktemp,
	modinfo, modprobe, more, mount, mountpoint, mpstat, mv, nanddump,
	nandwrite, nice, nohup, od, patch, pgrep, pidof, ping, pkill,
	printenv, printf, ps, pstree, pwd, rdev, readlink, realpath, renice,
	reset, resize, rev, rm, rmdir, rmmod, run-parts, sed, seq,
	setconsole, setserial, setsid, sh, sha1sum, sha256sum, sha512sum,
	shuf, sleep, sort, split, stat, strings, stty, sync, sysctl, tac,
	tail, tar, tee, test, time, top, touch, tr, true, ttysize, tune2fs,
	umount, uname, unexpand, uniq, unix2dos, unlink, unlzma, unlzop,
	unxz, unzip, uptime, usleep, uudecode, uuencode, vi, watch, wc,
	wget, which, whoami, xargs, xzcat, yes, zcat

=head1 COMMAND DESCRIPTIONS

=over 4

=item B<ash>

ash [-/+OPTIONS] [-/+o OPT]... [-c 'SCRIPT' [ARG0 [ARGS]] / FILE [ARGS]]

Unix shell interpreter

=item B<awk>

awk [OPTIONS] [AWK_PROGRAM] [FILE]...

	-v VAR=VAL	Set variable
	-F SEP		Use SEP as field separator
	-f FILE		Read program from FILE
	-e AWK_PROGRAM

=item B<base64>

base64 [-d] [FILE]

Base64 encode or decode FILE to standard output
	-d	Decode data

=item B<basename>

basename FILE [SUFFIX]

Strip directory path and .SUFFIX from FILE


=item B<bbconfig>

bbconfig 

Print the config file used by busybox build

=item B<blkid>

blkid [BLOCKDEV]...

Print UUIDs of all filesystems

=item B<blockdev>

blockdev OPTION BLOCKDEV

	--setro		Set ro
	--setrw		Set rw
	--getro		Get ro
	--getss		Get sector size
	--getbsz	Get block size
	--setbsz BYTES	Set block size
	--getsz		Get device size in 512-byte sectors
	--getsize64	Get device size in bytes
	--flushbufs	Flush buffers
	--rereadpt	Reread partition table

=item B<bunzip2>

bunzip2 [-cf] [FILE]...

Decompress FILEs (or stdin)

	-c	Write to stdout
	-f	Force

=item B<bzcat>

bzcat [FILE]...

Decompress to stdout

=item B<bzip2>

bzip2 [OPTIONS] [FILE]...

Compress FILEs (or stdin) with bzip2 algorithm

	-1..9	Compression level
	-d	Decompress
	-c	Write to stdout
	-f	Force

=item B<cal>

cal [-jy] [[MONTH] YEAR]

Display a calendar

	-j	Use julian dates
	-y	Display the entire year

=item B<cat>

cat [FILE]...

Concatenate FILEs and print them to stdout

=item B<catv>

catv [-etv] [FILE]...

Display nonprinting characters as ^x or M-x

	-e	End each line with $
	-t	Show tabs as ^I
	-v	Don't use ^x or M-x escapes

=item B<chattr>

chattr [-R] [-+=AacDdijsStTu] [-v VERSION] [FILE]...

Change file attributes on an ext2 fs

Modifiers:

	-	Remove attributes
	+	Add attributes
	=	Set attributes
Attributes:

	A	Don't track atime
	a	Append mode only
	c	Enable compress
	D	Write dir contents synchronously
	d	Don't backup with dump
	i	Cannot be modified (immutable)
	j	Write all data to journal first
	s	Zero disk storage when deleted
	S	Write file contents synchronously
	t	Disable tail-merging of partial blocks with other files
	u	Allow file to be undeleted
	-R	Recurse
	-v	Set the file's version/generation number

=item B<chgrp>

chgrp [-RhLHP]... GROUP FILE...

Change the group membership of each FILE to GROUP

	-R	Recurse
	-h	Affect symlinks instead of symlink targets
	-L	Traverse all symlinks to directories
	-H	Traverse symlinks on command line only
	-P	Don't traverse symlinks (default)

=item B<chmod>

chmod [-R] MODE[,MODE]... FILE...

Each MODE is one or more of the letters ugoa, one of the
symbols +-= and one or more of the letters rwxst

	-R	Recurse

=item B<chown>

chown [-RhLHP]... OWNER[<.|:>[GROUP]] FILE...

Change the owner and/or group of each FILE to OWNER and/or GROUP

	-R	Recurse
	-h	Affect symlinks instead of symlink targets

=item B<chroot>

chroot NEWROOT [PROG ARGS]

Run PROG with root directory set to NEWROOT

=item B<cksum>

cksum FILES...

Calculate the CRC32 checksums of FILES

=item B<clear>

clear 

Clear screen

=item B<cmp>

cmp [-l] [-s] FILE1 [FILE2]

Compare FILE1 with FILE2 (or stdin)

	-l	Write the byte numbers (decimal) and values (octal)
		for all differing bytes
	-s	Quiet

=item B<cp>

cp [OPTIONS] SOURCE... DEST

Copy SOURCE(s) to DEST

	-a	Same as -dpR
	-R,-r	Recurse
	-d,-P	Preserve symlinks (default if -R)
	-L	Follow all symlinks
	-H	Follow symlinks on command line
	-p	Preserve file attributes if possible
	-f	Overwrite
	-i	Prompt before overwrite
	-l,-s	Create (sym)links

=item B<cpio>

cpio [-dmvu] [-F FILE] [-H newc] [-tio] [EXTR_FILE]...

Extract or list files from a cpio archive, or
create an archive using file list on stdin

Main operation mode:

	-t	List
	-i	Extract EXTR_FILEs (or all)
	-o	Create (requires -H newc)
Options:

	-d	Make leading directories
	-m	Preserve mtime
	-v	Verbose
	-u	Overwrite
	-F FILE	Input (-t,-i,-p) or output (-o) file
	-H newc	Archive format

=item B<cut>

cut [OPTIONS] [FILE]...

Print selected fields from each input FILE to stdout

	-b LIST	Output only bytes from LIST
	-c LIST	Output only characters from LIST
	-d CHAR	Use CHAR instead of tab as the field delimiter
	-s	Output only the lines containing delimiter
	-f N	Print only these fields
	-n	Ignored

=item B<date>

date [OPTIONS] [+FMT] [TIME]

Display time (using +FMT), or set time

	[-s,--set] TIME	Set time to TIME
	-u,--utc	Work in UTC (don't convert to local time)
	-R,--rfc-2822	Output RFC-2822 compliant date string
	-I[SPEC]	Output ISO-8601 compliant date string
			SPEC='date' (default) for date only,
			'hours', 'minutes', or 'seconds' for date and
			time to the indicated precision
	-r,--reference FILE	Display last modification time of FILE
	-d,--date TIME	Display TIME, not 'now'
	-D FMT		Use FMT for -d TIME conversion

Recognized TIME formats:

	hh:mm[:ss]
	[YYYY.]MM.DD-hh:mm[:ss]
	YYYY-MM-DD hh:mm[:ss]
	[[[[[YY]YY]MM]DD]hh]mm[.ss]
	'date TIME' form accepts MMDDhhmm[[YY]YY][.ss] instead

=item B<dc>

dc EXPRESSION...

Tiny RPN calculator. Operations:
+, add, -, sub, *, mul, /, div, %, mod, **, exp, and, or, not, xor,
p - print top of the stack (without popping),
f - print entire stack,
o - pop the value and set output radix (must be 10, 16, 8 or 2).
Examples: 'dc 2 2 add p' -> 4, 'dc 8 8 mul 2 2 + / p' -> 16

=item B<dd>

dd [if=FILE] [of=FILE] [ibs=N] [obs=N] [bs=N] [count=N] [skip=N]
	[seek=N] [conv=notrunc|noerror|sync|fsync]

Copy a file with converting and formatting

	if=FILE		Read from FILE instead of stdin
	of=FILE		Write to FILE instead of stdout
	bs=N		Read and write N bytes at a time
	ibs=N		Read N bytes at a time
	obs=N		Write N bytes at a time
	count=N		Copy only N input blocks
	skip=N		Skip N input blocks
	seek=N		Skip N output blocks
	conv=notrunc	Don't truncate output file
	conv=noerror	Continue after read errors
	conv=sync	Pad blocks with zeros
	conv=fsync	Physically write data out before finishing
	conv=swab	Swap every pair of bytes

N may be suffixed by c (1), w (2), b (512), kD (1000), k (1024), MD, M, GD, G

=item B<devmem>

devmem ADDRESS [WIDTH [VALUE]]

Read/write from physical address

	ADDRESS	Address to act upon
	WIDTH	Width (8/16/...)
	VALUE	Data to be written

=item B<df>

df [-PkmhTai] [-B SIZE] [FILESYSTEM]...

Print filesystem usage statistics

	-P	POSIX output format
	-k	1024-byte blocks (default)
	-m	1M-byte blocks
	-h	Human readable (e.g. 1K 243M 2G)
	-T	Print filesystem type
	-a	Show all filesystems
	-i	Inodes
	-B SIZE	Blocksize

=item B<diff>

diff [-abBdiNqrTstw] [-L LABEL] [-S FILE] [-U LINES] FILE1 FILE2

Compare files line by line and output the differences between them.
This implementation supports unified diffs only.

	-a	Treat all files as text
	-b	Ignore changes in the amount of whitespace
	-B	Ignore changes whose lines are all blank
	-d	Try hard to find a smaller set of changes
	-i	Ignore case differences
	-L	Use LABEL instead of the filename in the unified header
	-N	Treat absent files as empty
	-q	Output only whether files differ
	-r	Recurse
	-S	Start with FILE when comparing directories
	-T	Make tabs line up by prefixing a tab when necessary
	-s	Report when two files are the same
	-t	Expand tabs to spaces in output
	-U	Output LINES lines of context
	-w	Ignore all whitespace

=item B<dirname>

dirname FILENAME

Strip non-directory suffix from FILENAME

=item B<dmesg>

dmesg [-c] [-n LEVEL] [-s SIZE]

Print or control the kernel ring buffer

	-c		Clear ring buffer after printing
	-n LEVEL	Set console logging level
	-s SIZE		Buffer size

=item B<dos2unix>

dos2unix [-ud] [FILE]

Convert FILE in-place from DOS to Unix format.
When no file is given, use stdin/stdout.

	-u	dos2unix
	-d	unix2dos

=item B<du>

du [-aHLdclsxhmk] [FILE]...

Summarize disk space used for each FILE and/or directory

	-a	Show file sizes too
	-L	Follow all symlinks
	-H	Follow symlinks on command line
	-d N	Limit output to directories (and files with -a) of depth < N
	-c	Show grand total
	-l	Count sizes many times if hard linked
	-s	Display only a total for each argument
	-x	Skip directories on different filesystems
	-h	Sizes in human readable format (e.g., 1K 243M 2G)
	-m	Sizes in megabytes
	-k	Sizes in kilobytes (default)

=item B<echo>

echo [-neE] [ARG]...

Print the specified ARGs to stdout

	-n	Suppress trailing newline
	-e	Interpret backslash escapes (i.e., \t=tab)
	-E	Don't interpret backslash escapes (default)

=item B<env>

env [-iu] [-] [name=value]... [PROG ARGS]

Print the current environment or run PROG after setting up
the specified environment

	-, -i	Start with an empty environment
	-u	Remove variable from the environment

=item B<expand>

expand [-i] [-t N] [FILE]...

Convert tabs to spaces, writing to stdout

	-i	Don't convert tabs after non blanks
	-t	Tabstops every N chars

=item B<expr>

expr EXPRESSION

Print the value of EXPRESSION to stdout

EXPRESSION may be:

	ARG1 | ARG2	ARG1 if it is neither null nor 0, otherwise ARG2
	ARG1 & ARG2	ARG1 if neither argument is null or 0, otherwise 0
	ARG1 < ARG2	1 if ARG1 is less than ARG2, else 0. Similarly:
	ARG1 <= ARG2
	ARG1 = ARG2
	ARG1 != ARG2
	ARG1 >= ARG2
	ARG1 > ARG2
	ARG1 + ARG2	Sum of ARG1 and ARG2. Similarly:
	ARG1 - ARG2
	ARG1 * ARG2
	ARG1 / ARG2
	ARG1 % ARG2
	STRING : REGEXP		Anchored pattern match of REGEXP in STRING
	match STRING REGEXP	Same as STRING : REGEXP
	substr STRING POS LENGTH Substring of STRING, POS counted from 1
	index STRING CHARS	Index in STRING where any CHARS is found, or 0
	length STRING		Length of STRING
	quote TOKEN		Interpret TOKEN as a string, even if
				it is a keyword like 'match' or an
				operator like '/'
	(EXPRESSION)		Value of EXPRESSION

Beware that many operators need to be escaped or quoted for shells.
Comparisons are arithmetic if both ARGs are numbers, else
lexicographical. Pattern matches return the string matched between
\( and \) or null; if \( and \) are not used, they return the number
of characters matched or 0.

=item B<false>

false 

Return an exit code of FALSE (1)

=item B<fatattr>

fatattr [-+rhsvda] FILE...

Change file attributes on FAT filesystem

	-	Clear attributes
	+	Set attributes
	r	Read only
	h	Hidden
	s	System
	v	Volume label
	d	Directory
	a	Archive

=item B<fdisk>

fdisk [-ul] [-C CYLINDERS] [-H HEADS] [-S SECTORS] [-b SSZ] DISK

Change partition table

	-u		Start and End are in sectors (instead of cylinders)
	-l		Show partition table for each DISK, then exit
	-b 2048		(for certain MO disks) use 2048-byte sectors
	-C CYLINDERS	Set number of cylinders/heads/sectors
	-H HEADS
	-S SECTORS

=item B<find>

find [-HL] [PATH]... [OPTIONS] [ACTIONS]

Search for files and perform actions on them.
First failed action stops processing of current file.
Defaults: PATH is current directory, action is '-print'

	-L,-follow	Follow symlinks
	-H		...on command line only
	-xdev		Don't descend directories on other filesystems
	-maxdepth N	Descend at most N levels. -maxdepth 0 applies
			actions to command line arguments only
	-mindepth N	Don't act on first N levels
	-depth		Act on directory *after* traversing it

Actions:

	( ACTIONS )	Group actions for -o / -a
	! ACT		Invert ACT's success/failure
	ACT1 [-a] ACT2	If ACT1 fails, stop, else do ACT2
	ACT1 -o ACT2	If ACT1 succeeds, stop, else do ACT2
			Note: -a has higher priority than -o
	-name PATTERN	Match file name (w/o directory name) to PATTERN
	-iname PATTERN	Case insensitive -name
	-path PATTERN	Match path to PATTERN
	-ipath PATTERN	Case insensitive -path
	-regex PATTERN	Match path to regex PATTERN
	-type X		File type is X (one of: f,d,l,b,c,...)
	-perm MASK	At least one mask bit (+MASK), all bits (-MASK),
			or exactly MASK bits are set in file's mode
	-mtime DAYS	mtime is greater than (+N), less than (-N),
			or exactly N days in the past
	-mmin MINS	mtime is greater than (+N), less than (-N),
			or exactly N minutes in the past
	-newer FILE	mtime is more recent than FILE's
	-inum N		File has inode number N
	-user NAME/ID	File is owned by given user
	-group NAME/ID	File is owned by given group
	-size N[bck]	File size is N (c:bytes,k:kbytes,b:512 bytes(def.))
			+/-N: file size is bigger/smaller than N
	-links N	Number of links is greater than (+N), less than (-N),
			or exactly N
	-prune		If current file is directory, don't descend into it
If none of the following actions is specified, -print is assumed
	-print		Print file name
	-print0		Print file name, NUL terminated
	-exec CMD ARG ;	Run CMD with all instances of {} replaced by
			file name. Fails if CMD exits with nonzero
	-exec CMD ARG + Run CMD with {} replaced by list of file names
	-delete		Delete current file/directory. Turns on -depth option

=item B<findfs>

findfs LABEL=label or UUID=uuid

Find a filesystem device based on a label or UUID

=item B<fold>

fold [-bs] [-w WIDTH] [FILE]...

Wrap input lines in each FILE (or stdin), writing to stdout

	-b	Count bytes rather than columns
	-s	Break at spaces
	-w	Use WIDTH columns instead of 80

=item B<free>

free 

Display the amount of free and used system memory

=item B<freeramdisk>

freeramdisk DEVICE

Free all memory used by the specified ramdisk

=item B<fsck>

fsck [-ANPRTV] [-C FD] [-t FSTYPE] [FS_OPTS] [BLOCKDEV]...

Check and repair filesystems

	-A	Walk /etc/fstab and check all filesystems
	-N	Don't execute, just show what would be done
	-P	With -A, check filesystems in parallel
	-R	With -A, skip the root filesystem
	-T	Don't show title on startup
	-V	Verbose
	-C n	Write status information to specified filedescriptor
	-t TYPE	List of filesystem types to check

=item B<fstrim>

fstrim [OPTIONS] MOUNTPOINT

	-o,--offset=OFFSET	Offset in bytes to discard from
	-l,--length=LEN		Bytes to discard
	-m,--minimum=MIN	Minimum extent length
	-v,--verbose		Print number of discarded bytes

=item B<fuser>

fuser [OPTIONS] FILE or PORT/PROTO

Find processes which use FILEs or PORTs

	-m	Find processes which use same fs as FILEs
	-4,-6	Search only IPv4/IPv6 space
	-s	Don't display PIDs
	-k	Kill found processes
	-SIGNAL	Signal to send (default: KILL)

=item B<getopt>

getopt [OPTIONS] [--] OPTSTRING PARAMS

	-a,--alternative		Allow long options starting with single -
	-l,--longoptions=LOPT[,...]	Long options to recognize
	-n,--name=PROGNAME		The name under which errors are reported
	-o,--options=OPTSTRING		Short options to recognize
	-q,--quiet			No error messages on unrecognized options
	-Q,--quiet-output		No normal output
	-s,--shell=SHELL		Set shell quoting conventions
	-T,--test			Version test (exits with 4)
	-u,--unquoted			Don't quote output

Example:


O=`getopt -l bb: -- ab:c:: "$@"` || exit 1
eval set -- "$O"
while true; do
	case "$1" in
	-a)	echo A; shift;;
	-b|--bb) echo "B:'$2'"; shift 2;;
	-c)	case "$2" in
		"")	echo C; shift 2;;
		*)	echo "C:'$2'"; shift 2;;
		esac;;
	--)	shift; break;;
	*)	echo Error; exit 1;;
	esac
done

=item B<grep>

grep [-HhnlLoqvsriwFE] [-m N] [-A/B/C N] PATTERN/-e PATTERN.../-f FILE [FILE]...

Search for PATTERN in FILEs (or stdin)

	-H	Add 'filename:' prefix
	-h	Do not add 'filename:' prefix
	-n	Add 'line_no:' prefix
	-l	Show only names of files that match
	-L	Show only names of files that don't match
	-c	Show only count of matching lines
	-o	Show only the matching part of line
	-q	Quiet. Return 0 if PATTERN is found, 1 otherwise
	-v	Select non-matching lines
	-s	Suppress open and read errors
	-r	Recurse
	-i	Ignore case
	-w	Match whole words only
	-x	Match whole lines only
	-F	PATTERN is a literal (not regexp)
	-E	PATTERN is an extended regexp
	-m N	Match up to N times per file
	-A N	Print N lines of trailing context
	-B N	Print N lines of leading context
	-C N	Same as '-A N -B N'
	-e PTRN	Pattern to match
	-f FILE	Read pattern from file

=item B<groups>

groups [USER]

Print the group memberships of USER or for the current process

=item B<gunzip>

gunzip [-cft] [FILE]...

Decompress FILEs (or stdin)

	-c	Write to stdout
	-f	Force
	-t	Test file integrity

=item B<gzip>

gzip [-cfd] [FILE]...

Compress FILEs (or stdin)

	-d	Decompress
	-c	Write to stdout
	-f	Force

=item B<head>

head [OPTIONS] [FILE]...

Print first 10 lines of each FILE (or stdin) to stdout.
With more than one FILE, precede each with a filename header.

	-n N[kbm]	Print first N lines
	-n -N[kbm]	Print all except N last lines
	-c [-]N[kbm]	Print first N bytes
	-q		Never print headers
	-v		Always print headers

N may be suffixed by k (x1024), b (x512), or m (x1024^2).

=item B<hexdump>

hexdump [-bcCdefnosvxR] [FILE]...

Display FILEs (or stdin) in a user specified format

	-b		One-byte octal display
	-c		One-byte character display
	-C		Canonical hex+ASCII, 16 bytes per line
	-d		Two-byte decimal display
	-e FORMAT_STRING
	-f FORMAT_FILE
	-n LENGTH	Interpret only LENGTH bytes of input
	-o		Two-byte octal display
	-s OFFSET	Skip OFFSET bytes
	-v		Display all input data
	-x		Two-byte hexadecimal display
	-R		Reverse of 'hexdump -Cv'

=item B<id>

id [OPTIONS] [USER]

Print information about USER or the current user

	-u	User ID
	-g	Group ID
	-G	Supplementary group IDs
	-n	Print names instead of numbers
	-r	Print real ID instead of effective ID

=item B<insmod>

insmod FILE [SYMBOL=VALUE]...

Load kernel module

=item B<install>

install [-cdDsp] [-o USER] [-g GRP] [-m MODE] [-t DIR] [SOURCE]... DEST

Copy files and set attributes

	-c	Just copy (default)
	-d	Create directories
	-D	Create leading target directories
	-s	Strip symbol table
	-p	Preserve date
	-o USER	Set ownership
	-g GRP	Set group ownership
	-m MODE	Set permissions
	-t DIR	Install to DIR

=item B<kill>

kill [-l] [-SIG] PID...

Send a signal (default: TERM) to given PIDs

	-l	List all signal names and numbers

=item B<killall>

killall [-l] [-q] [-SIG] PROCESS_NAME...

Send a signal (default: TERM) to given processes

	-l	List all signal names and numbers
	-q	Don't complain if no processes were killed

=item B<killall5>

killall5 [-l] [-SIG] [-o PID]...

Send a signal (default: TERM) to all processes outside current session

	-l	List all signal names and numbers
	-o PID	Don't signal this PID

=item B<less>

less [-EIMmNh~] [FILE]...

View FILE (or stdin) one screenful at a time

	-E	Quit once the end of a file is reached
	-I	Ignore case in all searches
	-M,-m	Display status line with line numbers
		and percentage through the file
	-N	Prefix line number to each line
	-~	Suppress ~s displayed past EOF

=item B<ln>

ln [OPTIONS] TARGET... LINK|DIR

Create a link LINK or DIR/TARGET to the specified TARGET(s)

	-s	Make symlinks instead of hardlinks
	-f	Remove existing destinations
	-n	Don't dereference symlinks - treat like normal file
	-b	Make a backup of the target (if exists) before link operation
	-S suf	Use suffix instead of ~ when making backup files
	-T	2nd arg must be a DIR
	-v	Verbose

=item B<losetup>

losetup [-r] [-o OFS] {-f|LOOPDEV} FILE - associate loop devices
	losetup -d LOOPDEV - disassociate
	losetup -a - show status
	losetup -f - show next free loop device

	-o OFS	Start OFS bytes into FILE
	-r	Read-only
	-f	Show/use next free loop device

=item B<ls>

ls [-1AaCxdLHRFplinsehrSXvctu] [-w WIDTH] [FILE]...

List directory contents

	-1	One column output
	-a	Include entries which start with .
	-A	Like -a, but exclude . and ..
	-C	List by columns
	-x	List by lines
	-d	List directory entries instead of contents
	-L	Follow symlinks
	-H	Follow symlinks on command line
	-R	Recurse
	-p	Append / to dir entries
	-F	Append indicator (one of */=@|) to entries
	-l	Long listing format
	-i	List inode numbers
	-n	List numeric UIDs and GIDs instead of names
	-s	List allocated blocks
	-e	List full date and time
	-h	List sizes in human readable format (1K 243M 2G)
	-r	Sort in reverse order
	-S	Sort by size
	-X	Sort by extension
	-v	Sort by version
	-c	With -l: sort by ctime
	-t	With -l: sort by mtime
	-u	With -l: sort by atime
	-w N	Assume the terminal is N columns wide
	--color[={always,never,auto}]	Control coloring

=item B<lsattr>

lsattr [-Radlv] [FILE]...

List file attributes on an ext2 fs

	-R	Recurse
	-a	Don't hide entries starting with .
	-d	List directory entries instead of contents
	-l	List long flag names
	-v	List the file's version/generation number

=item B<lsmod>

lsmod 

List the currently loaded kernel modules

=item B<lsof>

lsof 

Show all open files

=item B<lspci>

lspci [-mk]

List all PCI devices

	-m	Parsable output
	-k	Show driver

=item B<lzcat>

lzcat [FILE]...

Decompress to stdout

=item B<lzop>

lzop [-cfvd123456789CF] [FILE]...

	-1..9	Compression level
	-d	Decompress
	-c	Write to stdout
	-f	Force
	-v	Verbose
	-F	Don't store or verify checksum
	-C	Also write checksum of compressed block

=item B<lzopcat>

lzopcat [-vCF] [FILE]...

	-v	Verbose
	-F	Don't store or verify checksum

=item B<makedevs>

makedevs [-d device_table] rootdir

Create a range of special files as specified in a device table.
Device table entries take the form of:

<name> <type> <mode> <uid> <gid> <major> <minor> <start> <inc> <count>
Where name is the file name, type can be one of:
	f	Regular file
	d	Directory
	c	Character device
	b	Block device
	p	Fifo (named pipe)
uid is the user id for the target file, gid is the group id for the
target file. The rest of the entries (major, minor, etc) apply to
to device special files. A '-' may be used for blank entries.

=item B<md5sum>

md5sum [-c[sw]] [FILE]...

Print or check MD5 checksums

	-c	Check sums against list in FILEs
	-s	Don't output anything, status code shows success
	-w	Warn about improperly formatted checksum lines

=item B<mkdir>

mkdir [OPTIONS] DIRECTORY...

Create DIRECTORY

	-m MODE	Mode
	-p	No error if exists; make parent directories as needed

=item B<mkdosfs>

mkdosfs [-v] [-n LABEL] BLOCKDEV [KBYTES]

Make a FAT32 filesystem

	-v	Verbose
	-n LBL	Volume label

=item B<mke2fs>

mke2fs [-Fn] [-b BLK_SIZE] [-i INODE_RATIO] [-I INODE_SIZE] [-m RESERVED_PERCENT] [-L LABEL] BLOCKDEV [KBYTES]

	-b BLK_SIZE	Block size, bytes
	-F		Force
	-i RATIO	Max number of files is filesystem_size / RATIO
	-I BYTES	Inode size (min 128)
	-L LBL		Volume label
	-m PERCENT	Percent of blocks to reserve for admin
	-n		Dry run

=item B<mkfifo>

mkfifo [-m MODE] NAME

Create named pipe

	-m MODE	Mode (default a=rw)

=item B<mkfs.ext2>

mkfs.ext2 [-Fn] [-b BLK_SIZE] [-i INODE_RATIO] [-I INODE_SIZE] [-m RESERVED_PERCENT] [-L LABEL] BLOCKDEV [KBYTES]

	-b BLK_SIZE	Block size, bytes
	-F		Force
	-i RATIO	Max number of files is filesystem_size / RATIO
	-I BYTES	Inode size (min 128)
	-L LBL		Volume label
	-m PERCENT	Percent of blocks to reserve for admin
	-n		Dry run

=item B<mkfs.reiser>

mkfs.reiser [-f] [-l LABEL] BLOCKDEV [4K-BLOCKS]

Make a ReiserFS V3 filesystem

	-f	Force
	-l LBL	Volume label

=item B<mkfs.vfat>

mkfs.vfat [-v] [-n LABEL] BLOCKDEV [KBYTES]

Make a FAT32 filesystem

	-v	Verbose
	-n LBL	Volume label

=item B<mknod>

mknod [-m MODE] NAME TYPE MAJOR MINOR

Create a special file (block, character, or pipe)

	-m MODE	Creation mode (default a=rw)
TYPE:
	b	Block device
	c or u	Character device
	p	Named pipe (MAJOR and MINOR are ignored)

=item B<mkswap>

mkswap [-L LBL] BLOCKDEV [KBYTES]

Prepare BLOCKDEV to be used as swap partition

	-L LBL	Label

=item B<mktemp>

mktemp [-dt] [-p DIR] [TEMPLATE]

Create a temporary file with name based on TEMPLATE and print its name.
TEMPLATE must end with XXXXXX (e.g. [/dir/]nameXXXXXX).
Without TEMPLATE, -t tmp.XXXXXX is assumed.

	-d	Make directory, not file
	-q	Fail silently on errors
	-t	Prepend base directory name to TEMPLATE
	-p DIR	Use DIR as a base directory (implies -t)
	-u	Do not create anything; print a name

Base directory is: -p DIR, else $TMPDIR, else /tmp

=item B<modinfo>

modinfo [-adlp0] [-F keyword] MODULE

	-a		Shortcut for '-F author'
	-d		Shortcut for '-F description'
	-l		Shortcut for '-F license'
	-p		Shortcut for '-F parm'
	-F keyword	Keyword to look for
	-0		Separate output with NULs

=item B<modprobe>

modprobe [-qfwrsv] MODULE [SYMBOL=VALUE]...

	-r	Remove MODULE (stacks) or do autoclean
	-q	Quiet
	-v	Verbose
	-f	Force
	-w	Wait for unload
	-s	Report via syslog instead of stderr

=item B<more>

more [FILE]...

View FILE (or stdin) one screenful at a time

=item B<mount>

mount [OPTIONS] [-o OPTS] DEVICE NODE

Mount a filesystem. Filesystem autodetection requires /proc.

	-a		Mount all filesystems in fstab
	-f		Dry run
	-i		Don't run mount helper
	-v		Verbose
	-r		Read-only mount
	-w		Read-write mount (default)
	-t FSTYPE[,...]	Filesystem type(s)
	-O OPT		Mount only filesystems with option OPT (-a only)
-o OPT:
	loop		Ignored (loop devices are autodetected)
	[a]sync		Writes are [a]synchronous
	[no]atime	Disable/enable updates to inode access times
	[no]diratime	Disable/enable atime updates to directories
	[no]relatime	Disable/enable atime updates relative to modification time
	[no]dev		(Dis)allow use of special device files
	[no]exec	(Dis)allow use of executable files
	[no]suid	(Dis)allow set-user-id-root programs
	[r]shared	Convert [recursively] to a shared subtree
	[r]slave	Convert [recursively] to a slave subtree
	[r]private	Convert [recursively] to a private subtree
	[un]bindable	Make mount point [un]able to be bind mounted
	[r]bind		Bind a file or directory [recursively] to another location
	move		Relocate an existing mount point
	remount		Remount a mounted filesystem, changing flags
	ro/rw		Same as -r/-w

There are filesystem-specific -o flags.

=item B<mountpoint>

mountpoint [-q] <[-dn] DIR | -x DEVICE>

Check if the directory is a mountpoint

	-q	Quiet
	-d	Print major/minor device number of the filesystem
	-n	Print device name of the filesystem
	-x	Print major/minor device number of the blockdevice

=item B<mpstat>

mpstat [-A] [-I SUM|CPU|ALL|SCPU] [-u] [-P num|ALL] [INTERVAL [COUNT]]

Per-processor statistics

	-A			Same as -I ALL -u -P ALL
	-I SUM|CPU|ALL|SCPU	Report interrupt statistics
	-P num|ALL		Processor to monitor
	-u			Report CPU utilization

=item B<mv>

mv [-fin] SOURCE DEST
or: mv [-fin] SOURCE... DIRECTORY

Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY

	-f	Don't prompt before overwriting
	-i	Interactive, prompt before overwrite
	-n	Don't overwrite an existing file

=item B<nanddump>

nanddump [-o] [--bb=padbad|skipbad] [-s ADDR] [-l LEN] [-f FILE] MTD_DEVICE

Dump MTD_DEVICE

	-o	Dump oob data
	-s ADDR	Start address
	-l LEN	Length
	-f FILE	Dump to file ('-' for stdout)
	--bb=METHOD:
		skipbad: skip bad blocks
		padbad: substitute bad blocks by 0xff (default)

=item B<nandwrite>

nandwrite [-p] [-s ADDR] MTD_DEVICE [FILE]

Write to MTD_DEVICE

	-p	Pad to page size
	-s ADDR	Start address

=item B<nice>

nice [-n ADJUST] [PROG ARGS]

Change scheduling priority, run PROG

	-n ADJUST	Adjust priority by ADJUST

=item B<nohup>

nohup PROG ARGS

Run PROG immune to hangups, with output to a non-tty

=item B<od>

od [-aBbcDdeFfHhIiLlOovXx] [FILE]

Print FILE (or stdin) unambiguously, as octal bytes by default

=item B<patch>

patch [OPTIONS] [ORIGFILE [PATCHFILE]]

	-p,--strip N		Strip N leading components from file names
	-i,--input DIFF		Read DIFF instead of stdin
	-R,--reverse		Reverse patch
	-N,--forward		Ignore already applied patches
	-E,--remove-empty-files	Remove output files if they become empty

=item B<pgrep>

pgrep [-flnovx] [-s SID|-P PPID|PATTERN]

Display process(es) selected by regex PATTERN

	-l	Show command name too
	-f	Match against entire command line
	-n	Show the newest process only
	-o	Show the oldest process only
	-v	Negate the match
	-x	Match whole name (not substring)
	-s	Match session ID (0 for current)
	-P	Match parent process ID

=item B<pidof>

pidof [OPTIONS] [NAME]...

List PIDs of all processes with names that match NAMEs

	-s	Show only one PID
	-o PID	Omit given pid
		Use %PPID to omit pid of pidof's parent

=item B<ping>

ping [OPTIONS] HOST

Send ICMP ECHO_REQUEST packets to network hosts

	-c CNT		Send only CNT pings
	-s SIZE		Send SIZE data bytes in packets (default:56)
	-t TTL		Set TTL
	-I IFACE/IP	Use interface or IP address as source
	-W SEC		Seconds to wait for the first response (default:10)
			(after all -c CNT packets are sent)
	-w SEC		Seconds until ping exits (default:infinite)
			(can exit earlier with -c CNT)
	-q		Quiet, only display output at start
			and when finished
	-p		Pattern to use for payload

=item B<pkill>

pkill [-l|-SIGNAL] [-fnovx] [-s SID|-P PPID|PATTERN]

Send a signal to process(es) selected by regex PATTERN

	-l	List all signals
	-f	Match against entire command line
	-n	Signal the newest process only
	-o	Signal the oldest process only
	-v	Negate the match
	-x	Match whole name (not substring)
	-s	Match session ID (0 for current)
	-P	Match parent process ID

=item B<printenv>

printenv [VARIABLE]...

Print environment VARIABLEs.
If no VARIABLE specified, print all.

=item B<printf>

printf FORMAT [ARG]...

Format and print ARG(s) according to FORMAT (a-la C printf)

=item B<ps>

ps 

Show list of processes

	w	Wide output
	l	Long output
	T	Show threads

=item B<pstree>

pstree [-p] [PID|USER]

Display process tree, optionally start from USER or PID

	-p	Show pids

=item B<pwd>

pwd 

Print the full filename of the current working directory

=item B<rdev>

rdev 

Print the device node associated with the filesystem mounted at '/'

=item B<readlink>

readlink [-fnv] FILE

Display the value of a symlink

	-f	Canonicalize by following all symlinks
	-n	Don't add newline
	-v	Verbose

=item B<realpath>

realpath FILE...

Return the absolute pathnames of given FILE

=item B<renice>

renice {{-n INCREMENT} | PRIORITY} [[-p | -g | -u] ID...]

Change scheduling priority for a running process

	-n	Adjust current nice value (smaller is faster)
	-p	Process id(s) (default)
	-g	Process group id(s)
	-u	Process user name(s) and/or id(s)

=item B<reset>

reset 

Reset the screen

=item B<resize>

resize 

Resize the screen

=item B<rev>

rev [FILE]...

Reverse lines of FILE

=item B<rm>

rm [-irf] FILE...

Remove (unlink) FILEs

	-i	Always prompt before removing
	-f	Never prompt
	-R,-r	Recurse

=item B<rmdir>

rmdir [OPTIONS] DIRECTORY...

Remove DIRECTORY if it is empty

	-p|--parents	Include parents
	--ignore-fail-on-non-empty

=item B<rmmod>

rmmod [-wfa] [MODULE]...

Unload kernel modules

	-w	Wait until the module is no longer used
	-f	Force unload
	-a	Remove all unused modules (recursively)

=item B<run-parts>

run-parts [-a ARG]... [-u UMASK] DIRECTORY

Run a bunch of scripts in DIRECTORY

	-a ARG		Pass ARG as argument to scripts
	-u UMASK	Set UMASK before running scripts

=item B<sed>

sed [-inrE] [-f FILE]... [-e CMD]... [FILE]...
or: sed [-inrE] CMD [FILE]...

	-e CMD	Add CMD to sed commands to be executed
	-f FILE	Add FILE contents to sed commands to be executed
	-i[SFX]	Edit files in-place (otherwise sends to stdout)
		Optionally back files up, appending SFX
	-n	Suppress automatic printing of pattern space
	-r,-E	Use extended regex syntax

If no -e or -f, the first non-option argument is the sed command string.
Remaining arguments are input files (stdin if none).

=item B<seq>

seq [-w] [-s SEP] [FIRST [INC]] LAST

Print numbers from FIRST to LAST, in steps of INC.
FIRST, INC default to 1.

	-w	Pad to last with leading zeros
	-s SEP	String separator

=item B<setconsole>

setconsole [-r] [DEVICE]

Redirect system console output to DEVICE (default: /dev/tty)

	-r	Reset output to /dev/console

=item B<setserial>

setserial [-gabGvzV] DEVICE [PARAMETER [ARG]]...

Request or set Linux serial port information

	-g	Interpret parameters as list of devices for reporting
	-a	Print all available information
	-b	Print summary information
	-G	Print in form which can be fed back
		to setserial as command line parameters
	-z	Zero out serial flags before setting
	-v	Verbose

Parameters: (* = takes an argument, ^ = can be turned off by preceding ^)
	*port, *irq, *divisor, *uart, *baud_base, *close_delay, *closing_wait,
	^fourport, ^auto_irq, ^skip_test, ^sak, ^session_lockout, ^pgrp_lockout,
	^callout_nohup, ^split_termios, ^hup_notify, ^low_latency, autoconfig,
	spd_normal, spd_hi, spd_vhi, spd_shi, spd_warp, spd_cust

UART types:

	unknown, 8250, 16450, 16550, 16550A, Cirrus, 16650, 16650V2, 16750,
	16950, 16954, 16654, 16850, RSA, NS16550A, XSCALE, RM9000, OCTEON, AR7,
	U6_16550A

=item B<setsid>

setsid PROG ARGS

Run PROG in a new session. PROG will have no controlling terminal
and will not be affected by keyboard signals (Ctrl-C etc).
See setsid(2) for details.

=item B<sh>

sh [-/+OPTIONS] [-/+o OPT]... [-c 'SCRIPT' [ARG0 [ARGS]] / FILE [ARGS]]

Unix shell interpreter

=item B<sha1sum>

sha1sum [-c[sw]] [FILE]...

Print or check SHA1 checksums

	-c	Check sums against list in FILEs
	-s	Don't output anything, status code shows success
	-w	Warn about improperly formatted checksum lines

=item B<sha256sum>

sha256sum [-c[sw]] [FILE]...

Print or check SHA256 checksums

	-c	Check sums against list in FILEs
	-s	Don't output anything, status code shows success
	-w	Warn about improperly formatted checksum lines

=item B<sha512sum>

sha512sum [-c[sw]] [FILE]...

Print or check SHA512 checksums

	-c	Check sums against list in FILEs
	-s	Don't output anything, status code shows success
	-w	Warn about improperly formatted checksum lines

=item B<shuf>

shuf [-e|-i L-H] [-n NUM] [-o FILE] [-z] [FILE|ARG...]

Randomly permute lines

	-e	Treat ARGs as lines
	-i L-H	Treat numbers L-H as lines
	-n NUM	Output at most NUM lines
	-o FILE	Write to FILE, not standard output
	-z	End lines with zero byte, not newline

=item B<sleep>

sleep [N]...

Pause for a time equal to the total of the args given, where each arg can
have an optional suffix of (s)econds, (m)inutes, (h)ours, or (d)ays

=item B<sort>

sort [-nrugMcszbdfimSTokt] [-o FILE] [-k start[.offset][opts][,end[.offset][opts]] [-t CHAR] [FILE]...

Sort lines of text

	-b	Ignore leading blanks
	-c	Check whether input is sorted
	-d	Dictionary order (blank or alphanumeric only)
	-f	Ignore case
	-g	General numerical sort
	-i	Ignore unprintable characters
	-k	Sort key
	-M	Sort month
	-n	Sort numbers
	-o	Output to file
	-k	Sort by key
	-t CHAR	Key separator
	-r	Reverse sort order
	-s	Stable (don't sort ties alphabetically)
	-u	Suppress duplicate lines
	-z	Lines are terminated by NUL, not newline
	-mST	Ignored for GNU compatibility

=item B<split>

split [OPTIONS] [INPUT [PREFIX]]

	-b N[k|m]	Split by N (kilo|mega)bytes
	-l N		Split by N lines
	-a N		Use N letters as suffix

=item B<stat>

stat [OPTIONS] FILE...

Display file (default) or filesystem status

	-c fmt	Use the specified format
	-f	Display filesystem status
	-L	Follow links
	-t	Display info in terse form

Valid format sequences for files:

 %a	Access rights in octal
 %A	Access rights in human readable form
 %b	Number of blocks allocated (see %B)
 %B	The size in bytes of each block reported by %b
 %d	Device number in decimal
 %D	Device number in hex
 %f	Raw mode in hex
 %F	File type
 %g	Group ID of owner
 %G	Group name of owner
 %h	Number of hard links
 %i	Inode number
 %n	File name
 %N	File name, with -> TARGET if symlink
 %o	I/O block size
 %s	Total size, in bytes
 %t	Major device type in hex
 %T	Minor device type in hex
 %u	User ID of owner
 %U	User name of owner
 %x	Time of last access
 %X	Time of last access as seconds since Epoch
 %y	Time of last modification
 %Y	Time of last modification as seconds since Epoch
 %z	Time of last change
 %Z	Time of last change as seconds since Epoch

Valid format sequences for file systems:

 %a	Free blocks available to non-superuser
 %b	Total data blocks in file system
 %c	Total file nodes in file system
 %d	Free file nodes in file system
 %f	Free blocks in file system
 %i	File System ID in hex
 %l	Maximum length of filenames
 %n	File name
 %s	Block size (for faster transfer)
 %S	Fundamental block size (for block counts)
 %t	Type in hex
 %T	Type in human readable form

=item B<strings>

strings [-afo] [-n LEN] [FILE]...

Display printable strings in a binary file

	-a	Scan whole file (default)
	-f	Precede strings with filenames
	-n LEN	At least LEN characters form a string (default 4)
	-o	Precede strings with decimal offsets

=item B<stty>

stty [-a|g] [-F DEVICE] [SETTING]...

Without arguments, prints baud rate, line discipline,
and deviations from stty sane

	-F DEVICE	Open device instead of stdin
	-a		Print all current settings in human-readable form
	-g		Print in stty-readable form
	[SETTING]	See manpage

=item B<sync>

sync 

Write all buffered blocks to disk

=item B<sysctl>

sysctl [OPTIONS] [KEY[=VALUE]]...

Show/set kernel parameters

	-e	Don't warn about unknown keys
	-n	Don't show key names
	-a	Show all values
	-w	Set values
	-p FILE	Set values from FILE (default /etc/sysctl.conf)
	-q      Set values silently

=item B<tac>

tac [FILE]...

Concatenate FILEs and print them in reverse

=item B<tail>

tail [OPTIONS] [FILE]...

Print last 10 lines of each FILE (or stdin) to stdout.
With more than one FILE, precede each with a filename header.

	-f		Print data as file grows
	-c [+]N[kbm]	Print last N bytes
	-n N[kbm]	Print last N lines
	-n +N[kbm]	Start on Nth line and print the rest
	-q		Never print headers
	-s SECONDS	Wait SECONDS between reads with -f
	-v		Always print headers
	-F		Same as -f, but keep retrying

N may be suffixed by k (x1024), b (x512), or m (x1024^2).

=item B<tar>

tar -[cxtZzJjahmvO] [-X FILE] [-T FILE] [-f TARFILE] [-C DIR] [FILE]...

Create, extract, or list files from a tar file

Operation:

	c	Create
	x	Extract
	t	List
	f	Name of TARFILE ('-' for stdin/out)
	C	Change to DIR before operation
	v	Verbose
	Z	(De)compress using compress
	z	(De)compress using gzip
	J	(De)compress using xz
	j	(De)compress using bzip2
	a	(De)compress using lzma
	O	Extract to stdout
	h	Follow symlinks
	m	Don't restore mtime
	exclude	File to exclude
	X	File with names to exclude
	T	File with names to include

=item B<tee>

tee [-ai] [FILE]...

Copy stdin to each FILE, and also to stdout

	-a	Append to the given FILEs, don't overwrite
	-i	Ignore interrupt signals (SIGINT)

=item B<test>

test EXPRESSION ]

Check file types, compare values etc. Return a 0/1 exit code
depending on logical value of EXPRESSION

=item B<time>

time [-v] PROG ARGS

Run PROG, display resource usage when it exits

	-v	Verbose

=item B<top>

top [-b] [-nCOUNT] [-dSECONDS] [-m]

Provide a view of process activity in real time.
Read the status of all processes from /proc each SECONDS
and display a screenful of them.
Keys:

	N/M/P/T: show CPU usage, sort by pid/mem/cpu/time
	S: show memory
	R: reverse sort
	H: toggle threads, 1: toggle SMP
	Q,^C: exit

Options:

	-b	Batch mode
	-n N	Exit after N iterations
	-d N	Delay between updates
	-m	Same as 's' key

=item B<touch>

touch [-c] [-d DATE] [-t DATE] [-r FILE] FILE...

Update the last-modified date on the given FILE[s]

	-c	Don't create files
	-d DT	Date/time to use
	-t DT	Date/time to use
	-r FILE	Use FILE's date/time

=item B<tr>

tr [-cds] STRING1 [STRING2]

Translate, squeeze, or delete characters from stdin, writing to stdout

	-c	Take complement of STRING1
	-d	Delete input characters coded STRING1
	-s	Squeeze multiple output characters of STRING2 into one character

=item B<true>

true 

Return an exit code of TRUE (0)

=item B<ttysize>

ttysize [w] [h]

Print dimension(s) of stdin's terminal, on error return 80x25

=item B<tune2fs>

tune2fs [-c MAX_MOUNT_COUNT] [-i DAYS] [-C MOUNT_COUNT] [-L LABEL] BLOCKDEV

Adjust filesystem options on ext[23] filesystems

=item B<umount>

umount [OPTIONS] FILESYSTEM|DIRECTORY

Unmount file systems

	-a	Unmount all file systems
	-r	Try to remount devices as read-only if mount is busy
	-l	Lazy umount (detach filesystem)
	-f	Force umount (i.e., unreachable NFS server)
	-D	Don't free loop device even if it has been used

=item B<uname>

uname [-amnrspvio]

Print system information

	-a	Print all
	-m	The machine (hardware) type
	-n	Hostname
	-r	Kernel release
	-s	Kernel name (default)
	-p	Processor type
	-v	Kernel version
	-i	The hardware platform
	-o	OS name

=item B<unexpand>

unexpand [-fa][-t N] [FILE]...

Convert spaces to tabs, writing to stdout

	-a,--all	Convert all blanks
	-f,--first-only	Convert only leading blanks
	-t,--tabs=N	Tabstops every N chars

=item B<uniq>

uniq [-cdu][-f,s,w N] [INPUT [OUTPUT]]

Discard duplicate lines

	-c	Prefix lines by the number of occurrences
	-d	Only print duplicate lines
	-u	Only print unique lines
	-f N	Skip first N fields
	-s N	Skip first N chars (after any skipped fields)
	-w N	Compare N characters in line

=item B<unix2dos>

unix2dos [-ud] [FILE]

Convert FILE in-place from Unix to DOS format.
When no file is given, use stdin/stdout.

	-u	dos2unix
	-d	unix2dos

=item B<unlink>

unlink FILE

Delete FILE by calling unlink()

=item B<unlzma>

unlzma [-cf] [FILE]...

Decompress FILE (or stdin)

	-c	Write to stdout
	-f	Force

=item B<unlzop>

unlzop [-cfvCF] [FILE]...

	-c	Write to stdout
	-f	Force
	-v	Verbose
	-F	Don't store or verify checksum

=item B<unxz>

unxz [-cf] [FILE]...

Decompress FILE (or stdin)

	-c	Write to stdout
	-f	Force

=item B<unzip>

unzip [-lnopq] FILE[.zip] [FILE]... [-x FILE...] [-d DIR]

Extract FILEs from ZIP archive

	-l	List contents (with -q for short form)
	-n	Never overwrite files (default: ask)
	-o	Overwrite
	-p	Print to stdout
	-q	Quiet
	-x FILE	Exclude FILEs
	-d DIR	Extract into DIR

=item B<uptime>

uptime 

Display the time since the last boot

=item B<usleep>

usleep N

Pause for N microseconds

=item B<uudecode>

uudecode [-o OUTFILE] [INFILE]

Uudecode a file
Finds OUTFILE in uuencoded source unless -o is given

=item B<uuencode>

uuencode [-m] [FILE] STORED_FILENAME

Uuencode FILE (or stdin) to stdout

	-m	Use base64 encoding per RFC1521

=item B<vi>

vi [OPTIONS] [FILE]...

Edit FILE

	-c CMD	Initial command to run ($EXINIT also available)
	-R	Read-only
	-H	List available features

=item B<watch>

watch [-n SEC] [-t] PROG ARGS

Run PROG periodically

	-n	Loop period in seconds (default 2)
	-t	Don't print header

=item B<wc>

wc [-cmlwL] [FILE]...

Count lines, words, and bytes for each FILE (or stdin)

	-c	Count bytes
	-m	Count characters
	-l	Count newlines
	-w	Count words
	-L	Print longest line length

=item B<wget>

wget [-c|--continue] [-s|--spider] [-q|--quiet] [-O|--output-document FILE]
	[--header 'header: value'] [-Y|--proxy on/off] [-P DIR]
	[-U|--user-agent AGENT] [-T SEC] URL...

Retrieve files via HTTP or FTP

	-s	Spider mode - only check file existence
	-c	Continue retrieval of aborted transfer
	-q	Quiet
	-P DIR	Save to DIR (default .)
	-T SEC	Network read timeout is SEC seconds
	-O FILE	Save to FILE ('-' for stdout)
	-U STR	Use STR for User-Agent header
	-Y	Use proxy ('on' or 'off')

=item B<which>

which [COMMAND]...

Locate a COMMAND

=item B<whoami>

whoami 

Print the user name associated with the current effective user id

=item B<xargs>

xargs [OPTIONS] [PROG ARGS]

Run PROG on every item given by stdin

	-p	Ask user whether to run each command
	-r	Don't run command if input is empty
	-0	Input is separated by NUL characters
	-t	Print the command on stderr before execution
	-e[STR]	STR stops input processing
	-n N	Pass no more than N args to PROG
	-s N	Pass command line of no more than N bytes
	-I STR	Replace STR within PROG ARGS with input line
	-x	Exit if size is exceeded

=item B<xzcat>

xzcat [FILE]...

Decompress to stdout

=item B<yes>

yes [STRING]

Repeatedly output a line with STRING, or 'y'

=item B<zcat>

zcat [FILE]...

Decompress to stdout

=back

=head1 LIBC NSS

GNU Libc (glibc) uses the Name Service Switch (NSS) to configure the behavior
of the C library for the local environment, and to configure how it reads
system data, such as passwords and group information.  This is implemented
using an /etc/nsswitch.conf configuration file, and using one or more of the
/lib/libnss_* libraries.  BusyBox tries to avoid using any libc calls that make
use of NSS.  Some applets however, such as login and su, will use libc functions
that require NSS.

If you enable CONFIG_USE_BB_PWD_GRP, BusyBox will use internal functions to
directly access the /etc/passwd, /etc/group, and /etc/shadow files without
using NSS.  This may allow you to run your system without the need for
installing any of the NSS configuration files and libraries.

When used with glibc, the BusyBox 'networking' applets will similarly require
that you install at least some of the glibc NSS stuff (in particular,
/etc/nsswitch.conf, /lib/libnss_dns*, /lib/libnss_files*, and /lib/libresolv*).

Shameless Plug: As an alternative, one could use a C library such as uClibc.  In
addition to making your system significantly smaller, uClibc does not require the
use of any NSS support files or libraries.

=head1 MAINTAINER

Denis Vlasenko <vda.linux@googlemail.com>

=head1 AUTHORS

The following people have contributed code to BusyBox whether they know it or
not.  If you have written code included in BusyBox, you should probably be
listed here so you can obtain your bit of eternal glory.  If you should be
listed here, or the description of what you have done needs more detail, or is
incorrect, please send in an update.


=for html <br>

Emanuele Aina <emanuele.aina@tiscali.it>
    run-parts

=for html <br>

Erik Andersen <andersen@codepoet.org>

    Tons of new stuff, major rewrite of most of the
    core apps, tons of new apps as noted in header files.
    Lots of tedious effort writing these boring docs that
    nobody is going to actually read.

=for html <br>

Laurence Anderson <l.d.anderson@warwick.ac.uk>

    rpm2cpio, unzip, get_header_cpio, read_gz interface, rpm

=for html <br>

Jeff Angielski <jeff@theptrgroup.com>

    ftpput, ftpget

=for html <br>

Edward Betts <edward@debian.org>

    expr, hostid, logname, whoami

=for html <br>

John Beppu <beppu@codepoet.org>

    du, nslookup, sort

=for html <br>

Brian Candler <B.Candler@pobox.com>

    tiny-ls(ls)

=for html <br>

Randolph Chung <tausq@debian.org>

    fbset, ping, hostname

=for html <br>

Dave Cinege <dcinege@psychosis.com>

    more(v2), makedevs, dutmp, modularization, auto links file,
    various fixes, Linux Router Project maintenance

=for html <br>

Jordan Crouse <jordan@cosmicpenguin.net>

    ipcalc

=for html <br>

Magnus Damm <damm@opensource.se>

    tftp client insmod powerpc support

=for html <br>

Larry Doolittle <ldoolitt@recycle.lbl.gov>

    pristine source directory compilation, lots of patches and fixes.

=for html <br>

Glenn Engel <glenne@engel.org>

    httpd

=for html <br>

Gennady Feldman <gfeldman@gena01.com>

    Sysklogd (single threaded syslogd, IPC Circular buffer support,
    logread), various fixes.

=for html <br>

Karl M. Hegbloom <karlheg@debian.org>

    cp_mv.c, the test suite, various fixes to utility.c, &c.

=for html <br>

Daniel Jacobowitz <dan@debian.org>

    mktemp.c

=for html <br>

Matt Kraai <kraai@alumni.cmu.edu>

    documentation, bugfixes, test suite

=for html <br>

Stephan Linz <linz@li-pro.net>

    ipcalc, Red Hat equivalence

=for html <br>

John Lombardo <john@deltanet.com>

    tr

=for html <br>

Glenn McGrath <bug1@iinet.net.au>

    Common unarchiving code and unarchiving applets, ifupdown, ftpgetput,
    nameif, sed, patch, fold, install, uudecode.
    Various bugfixes, review and apply numerous patches.

=for html <br>

Manuel Novoa III <mjn3@codepoet.org>

    cat, head, mkfifo, mknod, rmdir, sleep, tee, tty, uniq, usleep, wc, yes,
    mesg, vconfig, make_directory, parse_mode, dirname, mode_string,
    get_last_path_component, simplify_path, and a number trivial libbb routines

    also bug fixes, partial rewrites, and size optimizations in
    ash, basename, cal, cmp, cp, df, du, echo, env, ln, logname, md5sum, mkdir,
    mv, realpath, rm, sort, tail, touch, uname, watch, arith, human_readable,
    interface, dutmp, ifconfig, route

=for html <br>

Vladimir Oleynik <dzo@simtreas.ru>

    cmdedit; xargs(current), httpd(current);
    ports: ash, crond, fdisk, inetd, stty, traceroute, top;
    locale, various fixes
    and irreconcilable critic of everything not perfect.

=for html <br>

Bruce Perens <bruce@pixar.com>

    Original author of BusyBox in 1995, 1996. Some of his code can
    still be found hiding here and there...

=for html <br>

Tim Riker <Tim@Rikers.org>

    bug fixes, member of fan club

=for html <br>

Kent Robotti <robotti@metconnect.com>

    reset, tons and tons of bug reports and patches.

=for html <br>

Chip Rosenthal <chip@unicom.com>, <crosenth@covad.com>

    wget - Contributed by permission of Covad Communications

=for html <br>

Pavel Roskin <proski@gnu.org>

    Lots of bugs fixes and patches.

=for html <br>

Gyepi Sam <gyepi@praxis-sw.com>

    Remote logging feature for syslogd

=for html <br>

Linus Torvalds <torvalds@transmeta.com>

    mkswap, fsck.minix, mkfs.minix

=for html <br>

Mark Whitley <markw@codepoet.org>

    grep, sed, cut, xargs(previous),
    style-guide, new-applet-HOWTO, bug fixes, etc.

=for html <br>

Charles P. Wright <cpwright@villagenet.com>

    gzip, mini-netcat(nc)

=for html <br>

Enrique Zanardi <ezanardi@ull.es>

    tarcat (since removed), loadkmap, various fixes, Debian maintenance

=for html <br>

Tito Ragusa <farmatito@tiscali.it>

    devfsd and size optimizations in strings, openvt and deallocvt.

=for html <br>

Paul Fox <pgf@foxharp.boston.ma.us>

    vi editing mode for ash, various other patches/fixes

=for html <br>

Roberto A. Foglietta <me@roberto.foglietta.name>

    port: dnsd

=for html <br>

Bernhard Reutner-Fischer <rep.dot.nop@gmail.com>

    misc

=for html <br>

Mike Frysinger <vapier@gentoo.org>

    initial e2fsprogs, printenv, setarch, sum, misc

=for html <br>

Jie Zhang <jie.zhang@analog.com>

    fixed two bugs in msh and hush (exitcode of killed processes)

=cut
